---
name: "GitHub Actions Example"

"on":
  pull_request:
  push: { branches: [marwa] }

jobs:
  deploy_terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_github_actor_username: ${{ github.actor }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        # name: TF_VAR_atlantis_repository 
        # command: 'echo "GitHub Actor Username:$TF_VAR_github_actor_username"'
      - name: Apply Mapping Rules
        run: |
          # Define the mapping JSON string
          MAP_JSON='{
            "x": "123-",
            "y": "456-",
            "z": "789-"
          }'

          # Parse the JSON object and retrieve the mapped value
          MAPPED_USERNAME=$(echo "$MAP_JSON" | jq -r --arg input "$TF_VAR_github_actor_username" '.[$input // "default"]')

          # Combine the mapped value with the GitHub actor's username
          FINAL_USERNAME="${MAPPED_USERNAME}${TF_VAR_github_actor_username}"
          
          # Display the mapped username
          echo "Mapped GitHub Actor Username: $FINAL_USERNAME"
          
          # Set the mapped username as TF_VAR_github_actor_username
          echo "TF_VAR_github_actor_username=$FINAL_USERNAME" >> $GITHUB_ENV

      
      - name: Display GitHub Actor Username
        run: 'echo "GitHub Actor Username: $TF_VAR_github_actor_username"'

      # - name: Display GitHub Actor Username
      #   run: 'echo "GitHub Actor Username: $TF_VAR_github_actor_username"'
# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     env:
#       working-directory: terraform
#       TF_WORKSPACE: my-workspace
#     steps:
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: eu-west-1

#       - name: Check out code
#         uses: actions/checkout@v2
        
#       - name: Run Terrascan
#         id: terrascan
#         uses: accurics/terrascan-action@main
#         with:
#           iac_type: 'terraform'
#           iac_version: 'v14'
#           policy_type: 'aws'
#           only_warn: true
#           iac_dir: infrastructure
#         #sarif_upload: true
#         #non_recursive:
#         #iac_dir:
#         #policy_path:
#         #skip_rules:
#         #config_path:

#       - uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 0.14.4

#       - name: Terraform Fmt
#         id: fmt
#         run: terraform fmt -check
#         continue-on-error: true

#       - name: Terraform init
#         id: init
#         run: terraform init
#         working-directory: ${{ env.working-directory }}
#         env:
#           TF_CLI_ARGS_init: "-backend-config=role_arn=arn:aws:iam::99999999:role/my-github-actions-role -upgrade -reconfigure"
#           TF_VAR_assume_role: "my-github-actions-role"

#       - name: Terraform validate
#         id: validate
#         run: terraform validate

#       - name: Terraform plan
#         id: plan
#         run: terraform plan -no-color
#         working-directory: ${{ env.working-directory }}
#         env:
#           TF_VAR_assume_role: "my-github-actions-role"

#       - name: Plan output
#         id: output
#         uses: actions/github-script@v3
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             ### Workspace

#             \`${process.env.TF_WORKSPACE}\`

#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             <details><summary>Show Plan</summary>

#             \`\`\`hcl
#             ${process.env.PLAN}
#             \`\`\`

#             </details>

#             **Pusher**: @${{ github.actor }}
#             **Action**: ${{ github.event_name }}
#             `;
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })

#       - name: Terraform apply
#         id: apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false
#         working-directory: ${{ env.working-directory }}
#         env:
#           TF_VAR_assume_role: "my-github-actions-role"

#       - name: Install InSpec
#         uses: actionshub/chef-install@main
#         with:
#           channel: current
#           project: inspec

#       - name: Assume Role
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: eu-west-1
#           role-to-assume: arn:aws:iam::88888888888888:role/my-github-actions-role
#           role-duration-seconds: 600
#           role-skip-session-tagging: true          

#       - name: Infrastructure Tests
#         id: inspec
#         run: inspec exec profile/example --reporter=cli:- progress:inspec.log --input-file=profile/example/attributes-example.yml -t aws://
#         env:
#           CHEF_LICENSE: accept

#       - name: Infrastructure Test Results 
#         id: inspec_results
#         if: always()
#         run: | 
#           REPORT="$(cat inspec.log)"
#           REPORT="${REPORT//'%'/'%25'}"
#           REPORT="${REPORT//$'\n'/'%0A'}"
#           REPORT="${REPORT//$'\r'/'%0D'}"
#           echo "::set-output name=loginspec::$REPORT"

#       - name: Infrastructure tests Output
#         if: always()      
#         uses: actions/github-script@v3
#         env:
#           INSPEC: "Inspec Test Results \n${{ steps.inspec_results.outputs.loginspec }}"
#         with:
#           github-token: ${{secrets.GITHUB_TOKEN}}
#           script: |
#             const output = `#### Inspec Tests üñå\`${{ steps.inspec.outcome }}\`

#             <details><summary>Show Test Results</summary>

#             \`\`\`

#             ${process.env.INSPEC}
#             \`\`\`
           
#             </details>

#             `;
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })
